{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "disablePasswordAuthentication": {
      "defaultValue": true,
      "type": "Bool",
      "metadata": {
        "description": "This setting controls whether password auth is disabled for Linux VMs provisioned by this template. Default is true which disables password and makes SSH key required."
      }

    },
    "servicePrincipalClientId": {
      "type": "SecureString",
      "defaultValue": "*******",
      "metadata": {
        "description": "Client ID (used by cloudprovider)"
      }
    },
    "servicePrincipalClientSecret": {
      "type": "SecureString",
      "defaultValue": "****",
      "metadata": {
        "description": "The Service Principal Client Secret."
      }
    },
    "apiServerCertificate": {
      "type": "String",
      "defaultValue": "",
      "metadata": {
        "description": "The base 64 server certificate used on the master"
      }
    },
    "caCertificate": {
      "type": "String",
      "defaultValue": "",
      "metadata": {
        "description": "The base 64 certificate authority certificate"
      }
    },
    "clientCertificate": {
      "type": "String",
      "defaultValue": "",
      "metadata": {
        "description": "The base 64 client certificate used to communicate with the master"
      }
    },
    "clientPrivateKey": {
      "type": "SecureString",
      "defaultValue": "",
      "metadata": {
        "description": "The base 64 client private key used to communicate with the master"
      }
    }

  },
  "variables": {
    "agentAvailabilitySet": "AGENT-AVAILABILITYSET-B54A8428",
    "agentCount": 2,
    "agentSubnetName": "k8s-subnet",
    "virtualNetworkName": "k8s-vnet-B54A8428",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "vnetSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('agentSubnetName'))]",
    "agentVnetSubnetID": "[variables('vnetSubnetID')]",
    "apiVersion": "2016-03-30",
    "agentVMSize": "Standard_A5",
    "nameSuffix": "kubedin",
    "orchestratorName": "k8s",
    "agentVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'), '-')]",
    "username": "dinor",
    "sshRSAPublicKey": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCz7gkqOUUUlCObjgevthzsfFEUGPxm/8+tQYqDXQ/Z0aCOB25cvSHepTWPb0fFJ8fCqp/+9mxJg8tR6XY7nliZ8ioH3j3yBphgzPAkPmoX1fEe05TPm3RQQiQiljZPiKhnxnDI9kCyPI/Fp7cmhklEDFN9aMy/0/3Jx87pIktS0KPC9U/WMrtmNr/0LeKva/0+NgvJkm3mcqAFBH3pBVsnVQrGObp7cHXVXZAas6mjhqsTLjs52T1OQkRtilZsjV9kjvD5qU9tfKRVFBLZGIsVZsCGN4+i3R0UfrCRG6EYqezLZMMf5B5jCugD68kEVPSbsccMVijPDbLWmqIlLX45",
    "sshKeyPath": "[concat('/home/',variables('username'),'/.ssh/authorized_keys')]",
    "osImageOffer": "UbuntuServer",
    "osImagePublisher": "Canonical",
    "osImageSKU": "16.04.0-LTS",
    "osImageVersion": "16.04.201606270",
    "agentIndex": 0,
    "apiVersionStorage": "2015-06-15",
    "storageAccountPrefixes": [
      "0",
      "6",
      "c",
      "i",
      "o",
      "u",
      "1",
      "7",
      "d",
      "j",
      "p",
      "v",
      "2",
      "8",
      "e",
      "k",
      "q",
      "w",
      "3",
      "9",
      "f",
      "l",
      "r",
      "x",
      "4",
      "a",
      "g",
      "m",
      "s",
      "y",
      "5",
      "b",
      "h",
      "n",
      "t",
      "z"
    ],
    "agentAccountName": "ahl7jrgb3m64emstr0",
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "maxStorageAccountsPerAgent": "[div(variables('maxVMsPerPool'),variables('maxVMsPerStorageAccount'))]",
    "agentStorageAccountOffset": "[mul(variables('maxStorageAccountsPerAgent'),variables('agentIndex'))]",
    "maxVMsPerPool": 100,
    "maxVMsPerStorageAccount": 20,
    "agentStorageAccountsCount": "[add(div(variables('agentCount'), variables('maxVMsPerStorageAccount')), mod(add(mod(variables('agentCount'), variables('maxVMsPerStorageAccount')),2), add(mod(variables('agentCount'), variables('maxVMsPerStorageAccount')),1)))]",
    "masterPrivateIp": "10.240.255.5",
    "kubernetesHyperkubeSpec": "gcr.io/google_containers/hyperkube-amd64:v1.4.5",
    "kubeDnsServiceIP": "10.0.0.10",
    "tenantID": "****",
    "subscriptionId": "******",
    "resourceGroup": "kube",
    "location": "north europe",
    "subnetName": "k8s-subnet",
    "nsgName": "k8s-master-B54A8428-nsg",
    "routeTableName": "***********",
    "primaryAvailablitySetName": "************",
    "servicePrincipalClientId": "[parameters('servicePrincipalClientId')]",
    "servicePrincipalClientSecret": "[parameters('servicePrincipalClientSecret')]",
    "clientPrivateKey": "[parameters('clientPrivateKey')]"

  },
  "resources": [
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('agentVMNamePrefix'), 'nic-', copyIndex())]",
      "apiVersion": "2016-03-30",
      "location": "north europe",
      "copy": {
        "name": "loop",
        "count": "[variables('agentCount')]"
      },
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('agentVnetSubnetID')]"
              }
            }
          }
        ]
      },
      "dependsOn": [

      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('agentVMNamePrefix'), copyIndex())]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "north europe",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('agentCount')]"
      },

      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('agentVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('username')]",
          "computername": "[concat(variables('agentVMNamePrefix'), copyIndex())]",
          "customData": "[base64(concat('#cloud-config\n\n# { { { variable } } }\n\nruncmd:\n- /usr/bin/curl -sSL --retry 12 --retry-delay 10 https://get.docker.com/ > /tmp/install-docker\n- /bin/bash -c \"/bin/bash /tmp/install-docker\"\n\nwrite_files:\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/overlay.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',parameters('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/apiserver.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',parameters('apiserverCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',parameters('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('masterPrivateIp'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: \"/etc/systemd/system/kubelet.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=Kubelet\n    Requires=docker.service\n    After=docker.service\n\n    [Service]\n    Restart=always\n    ExecStartPre=/bin/mkdir -p /var/lib/kubelet\n    ExecStartPre=/bin/mount --bind /var/lib/kubelet /var/lib/kubelet\n    ExecStartPre=/bin/mount --make-shared /var/lib/kubelet\n    ExecStart=/usr/bin/docker run \\\n      --net=host \\\n      --pid=host \\\n      --privileged \\\n      --volume=/dev:/dev \\\n      --volume=/sys:/sys:ro \\\n      --volume=/var/run:/var/run:rw \\\n      --volume=/var/lib/docker/:/var/lib/docker:rw \\\n      --volume=/var/lib/kubelet/:/var/lib/kubelet:shared \\\n      --volume=/var/log:/var/log:rw \\\n      --volume=/etc/kubernetes/:/etc/kubernetes/:ro \\\n      --volume=/srv/kubernetes/:/srv/kubernetes/:ro \\\n        ',variables('kubernetesHyperkubeSpec'),' \\\n          /hyperkube kubelet \\\n            --api-servers=\"https://',variables('masterPrivateIp'),':443\" \\\n            --kubeconfig=/var/lib/kubelet/kubeconfig \\\n            --address=0.0.0.0 \\\n            --allow-privileged=true \\\n            --enable-server \\\n            --enable-debugging-handlers \\\n            --config=/etc/kubernetes/manifests \\\n            --cluster-dns=',variables('kubeDnsServiceIP'),' \\\n            --cluster-domain=cluster.local \\\n            --cloud-provider=azure \\\n            --cloud-config=/etc/kubernetes/azure.json \\\n            --hairpin-mode=promiscuous-bridge \\\n            --network-plugin=kubenet \\\n            --reconcile-cidr \\\n            --v=2\n    ExecStop=/usr/bin/docker stop -t 2 kubelet\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    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\n'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[variables('sshRSAPublicKey')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('agentVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('agentAccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'osdisk/', variables('agentVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            }
          }
        }
      },
      "dependsOn": [

        "[concat('Microsoft.Network/networkInterfaces/', variables('agentVMNamePrefix'), 'nic-', copyIndex())]"

      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('agentVMNamePrefix'), copyIndex(),'/cse', copyIndex())]",
      "apiVersion": "[variables('apiVersion')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('agentCount')]"
      },
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh ',variables('tenantID'),' ',variables('subscriptionId'),' ',variables('resourceGroup'),' ',variables('location'),' ',variables('subnetName'),' ',variables('nsgName'),' ',variables('virtualNetworkName'),' ',variables('routeTableName'),' ',variables('primaryAvailablitySetName'),' ',variables('servicePrincipalClientId'),' ',variables('servicePrincipalClientSecret'),' ',variables('clientPrivateKey'),' >> /var/log/azure/cluster-provision.log 2>&1 &\" &')]"
        },
        "publisher": "Microsoft.OSTCExtensions",
        "settings": { },
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('agentVMNamePrefix'), copyIndex())]"

      ]
    }

  ]

  
}